title:      "Project 03: Heap Management"
icon:       fa-book
navigation:
  - name: "Home"
    link: "index.html"
    icon: "fa-desktop"
internal:
external:
body:       |

    ## Overview

    The third project is to build your own implementation of [malloc] and
    [free].  That is, you will need to implement a library that interacts with
    the operating system to perform heap management on behalf of a user process
    as demonstrated in class.

    <div class="thumbnail text-center">
    <img src="static/img/project03-heap-management.png">
    </div>

    As demonstrated in [malloc0.c] from [Lecture 14], writing a functional heap
    management system is relatively straightforward:

    > Simply grow the heap using the [sbrk] system call whenever the user
    requests memory at run-time.

    Unfortunately, this initial version of a heap manager has some serious problems:

    1. It doesn't actually free anything, so it is quite possible (and likely)
    that we would eventually run out of memory.

    2. It doesn't keep track of blocks that have been allocated but are no
    longer in-use (ie. **free**), so it will never re-use a previous
    allocation.  This is both wasteful (as there is memory that we could use,
    but don't), and it is slow because we are then forced to call [sbrk], which
    is a system call and thus incurs the overhead of *context switching*.

    To remedy this, we wrote [malloc1.c], which utilizes a circular
    doubly-linked [free list] to keep track of **only** the **free** blocks as
    shown below:

    <div class="thumbnail text-center">
    <img src="static/img/project03-circular-free-list.png">
    </div>

    The [malloc1.c] shown in class has the following features:

    1. It maintains a [free list] of all the **free** blocks (previously
    allocated blocks that are no longer in use).

    2. [malloc] will search this [free list] for a **free** block it can
    re-use.  If no such block exists, it will simply fall-back to growing the
    heap with [sbrk].

    3. [free] will insert released blocks to the [free list] to make them
    available for future re-use.

    While this second version is better than the first heap manager, it is
    still lacking important features.  For this project, you are to extend the
    functionality of the [malloc1.c] allocator to incorporate the following:

    0. Ensure that all memory allocations are aligned to the nearest [word size].

    1. Implement multiple **search** algorithms (**First Fit**, **Best Fit**,
    and **Worst Fit**).

        *To support different strategies in the same source file, we will use
        [C]'s [#if] directive to select different blocks of code at compile
        time.*

    2. Implement **shrinking** the heap when a block is released.

    3. Implement **splitting** a block when it is re-used.

    4. Implement **merging** a block when it is inserted into the **free list**.

    5. Ensure that blocks in the **free list** are stored in sorted (ie.
    **ascending**) order.

    6. Implement the complementary [calloc] and [realloc] functions.

    7. Add counters to keep track of number of operations performed by the
    allocator and the amount of [internal fragmentation] and [external
    fragmentation].  When the process exits, the library should output the
    following type of information (based on the counters):

            :::text
            blocks:      0
            free blocks: 0
            mallocs:     10
            frees:       10
            callocs:     0
            reallocs:    0
            reuses:      0
            grows:       10
            shrinks:     10
            splits:      0
            merges:      0
            requested:   10240
            heap size:   0
            internal:    0.00
            external:    0.00

    Once you have a working [malloc] implementation (as verified by the
    provided functional and unit tests), you are to analyze the metrics above
    for the different heap management strategies.

    <div class="alert alert-danger" markdown="1">
    **Note**: We will not consider thread-safety or support multiple threads at
    all for this project.
    </div>

    Working in groups of **one** or **two** people, you are to create a
    **library** that implements [malloc] and [free] by **noon** on **Monday,
    November 18, 2024**.  More details about this project and your deliverables
    are described below.

    <div class="alert alert-info" markdown="1">
    #### <i class="fa fa-cogs"></i> Heap Management

    Implementing your own heap management library is more common than you
    think.  For instance, [Firefox] uses [jemalloc], while [GNU] uses
    [dlmalloc], and [Google] provides [tcmalloc].  As hardware and operating
    systems evolve, the optimal **heap management strategies** change as well,
    and so developers continue to advance the state of the art.  For this
    project, we will focus on understanding the basics and getting something
    that works (*good enough*).

    For a reference on how to create a simple heap management library, I
    recommend: [A quick tutorial on implementing and debugging malloc, free,
    calloc, and realloc](http://danluu.com/malloc-tutorial/).  This is what I
    initially used as the basis for this project (*many moons ago*).

    </div>

    [malloc]:   http://man7.org/linux/man-pages/man3/malloc.3.html
    [calloc]:   http://man7.org/linux/man-pages/man3/malloc.3.html
    [realloc]:  http://man7.org/linux/man-pages/man3/malloc.3.html
    [free]:     http://man7.org/linux/man-pages/man3/malloc.3.html
    [dlmalloc]: http://gee.cs.oswego.edu/dl/html/malloc.html
    [tcmalloc]: http://goog-perftools.sourceforge.net/doc/tcmalloc.html
    [Firefox]:  https://www.mozilla.org/en-US/firefox/
    [jemalloc]: http://jemalloc.net/
    [GNU]:      https://www.gnu.org
    [Google]:   https://www.google.com
    [atexit]:   http://man7.org/linux/man-pages/man3/atexit.3.html
    [#if]:      https://msdn.microsoft.com/en-us/library/ew2hz0yd.aspx

    ## Deliverables

    As noted above, you are to work **individually** or in **pairs** to
    implement your heap management library.  You must use [C] (not [C++]) as
    the implementation language.  Any test scripts or auxillary tools can be
    written in any reasonable scripting language.

    [C]:    https://en.wikipedia.org/wiki/C_(programming_language)
    [C++]:  https://isocpp.org/

    ### Timeline

    Here is a timeline of events related to this project:

    <table class="table table-striped table-bordered" markdown="1">
    <thead>
      <th>Date</th>
      <th>Event</th>
    </thead>
    <tbody markdown="1">
    <tr>
      <td class="text-strong">Sunday, October 27</td>
      <td>Project description and repository are available.</td>
    </tr>
    <tr>
      <td class="text-strong">Sunday, November 10</td>
      <td>Brainstorming should be completed.</td>
    </tr>
    <tr markdown="1">
      <td class="text-strong">Monday, November 18</td>
      <td markdown="1">Library is due (pushed to [GitHub] `project03` branch).</td>
    </tr>
    </tbody>
    </table>

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-github"></i> Group Project

    For the final submission, please open a **Pull Request** on your repository
    (for your `project03` branch to the `master` branch) and assign it to the
    **instructor**.

    </div>

    ### Repository

    To start this project, you must create a [Project 03] repository on [GitHub]
    using the following template:

    > [https://classroom.github.com/a/tSiXMZj7](https://classroom.github.com/a/tSiXMZj7)

    <div class="alert alert-warning" markdown="1">
    **Note**: Do your work in a separate [git] branch that can be later merged
    into the `master` branch (ie. make a `project03` branch, **DO NOT COMMIT OR
    MERGE TO MASTER**).
    </div>

    ### Documentation

    The [Project 03] repository includes a `README.md` file with the following
    sections:

    1. **Student**: This should be the names and email addresses of each group member.

    2. **Video**: This should have the link to your reflection video (described below).

    3. **Brainstorming**: This contains questions that should help you design
      and plan your approach to the project. **You do not need to fill these
      out, but they are meant to be helpful**.

    4. **Errata**: This should contain a description of any known errors or
    deficiencies in your implementation.

    5. **Acknowledgments**: This should list anyone you collaborated with or
      received help from (including TAs, students, and AI tools).

    You must complete this document report as part of your project.

    ### Source Code

    As you can see, the base [Project 03] repository contains a `README.md`
    file and the following folder hierarchy:

        :::bash
        project03
            \_  Makefile        # This is the project Makefile
            \_  bin             # This contains the binary executables and test scripts
            \_  include
                \_  malloc      # This contains the malloc library header files
            \_  lib             # This contains the malloc library when built
            \_  src             # This contains the malloc library source code
            \_  tests           # This contains the functional and unit test code

    You must maintain this folder structure for your project and place files in
    their appropriate place.

    #### Compiling

    To help you get started, we have provided a `Makefile` with all the
    necessary targets:

        :::bash
        $ make                  # Build libraries and test applications
        Building lib/libmalloc-ff.so
        Building lib/libmalloc-bf.so
        Building lib/libmalloc-wf.so
        Building bin/test_00
        Building bin/test_01
        Building bin/test_02
        Building bin/test_03
        Building bin/test_04
        Building bin/test_05
        Building bin/unit_block
        Building bin/unit_freelist

        $ make clean            # Removes all targets
        Removing libraries
        Removing tests

    <div class="alert alert-warning" markdown="1">
    #### <i class="fa fa-code"></i> K.I.S.S.

    While the exact organization of the project code is up to you, keep in mind
    that you will be graded in part on **coding style**, **cleaniness**, and
    **organization**.  This means your code should be consistently formatted,
    not contain any dead code, have reasonable comments, and appropriate naming
    among other things:

    - Break long functions into smaller functions.

    - Make sure each function does one thing and does it well.

    - Abstract, but don't over do it.

    Please refer to these [Coding Style] slides for some tips and guidelines on
    coding style expectations.

    </div>

    #### Running

    Once you have the library, you can use it to override the existing [malloc]
    functions from the standard library by using the `LD_PRELOAD` trick:

        :::bash
        # Use our implementation of library
        $ env LD_PRELOAD=lib/libmalloc-ff.so cat README.md

    This will load our library first and thus link any calls to [malloc] and
    [free] in `cat` to our library rather than the standard [C] library.  To
    make this more convenient, you should consider creating a `bin/run.sh`
    script that sets the environment variable for you and then runs the
    specified command.

    <div class="alert alert-info" markdown="1">
    **Note**: there are three versions of our custom [malloc] implementation,
    where each version corresponds to a different **search** algorithm (**first
    fit (ff)**, **best fit (bf)**, and **worst fit (wf)**).
    </div>

    #### Implementation

    All of the [C] header files are in the `include/malloc` folder, while the
    [C] source code for the [malloc] library is in the `src` folder.  To help
    you get started, parts of the project are already implemented:

        :::bash
        [x] include/malloc/block.h      # Block structure header (implemented)
        [x] include/malloc/counters.h   # Counters header (implemented)
        [x] include/malloc/freelist.h   # Free List header (implemented)
        [~] src/block.c                 # Block structure definitions (partially implemented)
        [~] src/counters.c              # Counters definitions (partially implemented)
        [~] src/freelist.c              # Free List definitions (partially implemented)
        [~] src/posix.c                 # POSIX definitions (partially implemented)

    Basically, the [malloc1.c] code demonstrated in [Lecture 14] was taken and
    split into separate files to form the skeleton provided to you.
    Additionally, we have implemented most of the desired counting
    functionality for you, so you can concentrate on just the block
    manipulation and free list management operations.  Each of the functions in
    the incomplete files above have comments that describe what needs to be
    done.

    You will need to examine these source files and complete the implementation
    of a [malloc] library that uses a **circular doubly-linked** [free list] to
    track **free** blocks in sorted order (ie. smaller block addresses appear
    towards the front of the [free list]).  To do so, you should start with the
    basic `Block` functions, then move to the [free list] functions.  Once
    those pass the provided unit tests, you should then utilize those
    components to complete the [malloc], [free], [calloc], and [realloc]
    functions:

    1. `src/block.c`: This file contains the functions for the `Block`
    structure, which contains the **aligned** `capacity` of the requested
    allocation and the **unaligned** `size` of the requested allocation
    (neither of which includes space for the embedded `Block` structure), and
    pointers to the previous and next `Block` structures.  If the `Block` is
    detached, then it should just point to itself.

        You will need to think carefully about how to manipulate the `Block`
        structure in the context of circular doubly-linked list with a sentinel
        node.

    2. `src/counters.c`: This file contains the functions for keeping
    track of the various counters utilized in the library.  Whenever [malloc]
    is called, it will call the `init_counters` function which will register
    the `dump_counters` function to run when the program properly terminates.

        You will need to implement the functions for computing the [internal
        fragmentation] and [external fragmentation] of the heap.

    3. `src/freelist.c`: This file contains the functions for the [free
    list].

        You will need to think carefully about what needs to happen during
        searching and insertion.  In particular, you will need to think about
        how to ensure the [free list] remains in sorted order and then how to
        exploit that ordering to **merge** adjacent blocks.

    4. `src/posix.c`: This file contains the [POSIX] functions: [malloc],
    [free], [calloc], [realloc].

        You will need to think carefully about which of the previous functions
        you want to utilize.

    <div class="alert alert-info" markdown="1">
    **Note**: There are also some `TODOs` to help identify which parts you need
    to implement, along with how you will want to modify the counters.
    </div>

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-align-right"></i> Alignment

    For better performance, all memory allocations should be aligned by the
    [word size] of the current machine.  For instance, if the user requests
    `14` bytes and our [word size] is `8` bytes, then we will actually allocate
    `16` bytes as this is the nearest multiple of the [word size] (that has
    sufficient capacity).

    A `ALIGN` macro is provided to you that will perform this *rounding*
    automatically for you.  Whenever you are comparing or determining
    **sizes**, you need to think carefully if you want to use the original size
    as requested by the user and stored in the `Block` structure (e.g. `14`) or
    if you really want to use the capacity of the Block (e.g.
    `block->capacity`) which stores the original **aligned** allocation
    capacity.

    Failure to properly utilize this `ALIGN` macro will most likely lead to
    **subtle** and **frustrating** errors.

    </div>

    ### Testing

    As you develop your library, you should utilize the provided functional and
    unit tests that ensure your heap management library works correctly:

        :::text
        $ make test             # Build and runs test programs
        Building bin/test_00
        Building bin/test_01
        Building bin/test_02
        Building bin/test_03
        Building bin/test_04
        Building bin/test_05
        Building bin/unit_block
        Building bin/unit_freelist

        Testing unit_block...
          block_allocate                         ... Success
          block_release                          ... Success
          block_detach                           ... Success
          block_merge                            ... Success
          block_split                            ... Success

        Testing unit_freelist...
          free_list_search_ff                    ... Success
          free_list_search_bf                    ... Success
          free_list_search_wf                    ... Success
          free_list_insert                       ... Success
          free_list_length                       ... Success

        Building lib/libmalloc-ff.so
        Building lib/libmalloc-bf.so
        Building lib/libmalloc-wf.so
        Running run_test_00.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

        Running run_test_01.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

        Running run_test_02.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

        Running run_test_03.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

        Running run_test_04.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

        Running run_test_05.sh
          Timing libmalloc-ff.so                 ... 0m1.636s
          Timing libmalloc-bf.so                 ... 0m2.959s
          Timing libmalloc-wf.so                 ... 0m2.976s

        Running run_test_06.sh
          Testing libmalloc-ff.so (cat)          ... Success
          Testing libmalloc-bf.so (cat)          ... Success
          Testing libmalloc-wf.so (cat)          ... Success
          Testing libmalloc-ff.so (md5sum)       ... Success
          Testing libmalloc-bf.so (md5sum)       ... Success
          Testing libmalloc-wf.so (md5sum)       ... Success
          Testing libmalloc-ff.so (sha1sum)      ... Success
          Testing libmalloc-bf.so (sha1sum)      ... Success
          Testing libmalloc-wf.so (sha1sum)      ... Success
          Testing libmalloc-ff.so (sort)         ... Success
          Testing libmalloc-bf.so (sort)         ... Success
          Testing libmalloc-wf.so (sort)         ... Success
          Testing libmalloc-ff.so (dd)           ... Success
          Testing libmalloc-bf.so (dd)           ... Success
          Testing libmalloc-wf.so (dd)           ... Success
          Testing libmalloc-ff.so (du)           ... Success
          Testing libmalloc-bf.so (du)           ... Success
          Testing libmalloc-wf.so (du)           ... Success
          Testing libmalloc-ff.so (find)         ... Success
          Testing libmalloc-bf.so (find)         ... Success
          Testing libmalloc-wf.so (find)         ... Success

    Note, you can run tests individually:

        :::bash
        $ ./bin/run_test_00.sh
          Testing libmalloc-ff.so                ... Success
          Testing libmalloc-bf.so                ... Success
          Testing libmalloc-wf.so                ... Success

    ### Debugging

    While running the tests, you may encounter some **segfaults** and other
    memory errors.  Because we are side-loading our own [malloc]
    implementation, you will need to do the following to debug a test
    application using [gdb].

        :::bash
        $ gdb ./bin/test_01
        ...
        (gdb) set exec-wrapper env LD_PRELOAD=./lib/libmalloc-ff.so
        (gdb) run
        ...
        (gdb) bt

    Basically, you want to first load [gdb] with the test program that is
    crashing.  Next, you need to tell [gdb] to utilize the appropriate [malloc]
    library by creating an `exec-wrapper` that loads it into memory.  Next,
    simply run the program.  Once it segfaults, you can print a stack trace by
    using the `bt` command.  From there, you can explore the state of your
    program and see if you can determine what went wrong.

    [gdb]: https://www.gnu.org/software/gdb/

    ## Reflection

    To reflect on the project and the concepts involved, you will need to
    create a **group video demonstration** of your software artifact and
    complete an **individual quiz** (*each member will submit their own answers
    to their own private assignments repository*).

    ### Video Demonstration

    As part of your grade, your group will need to create a video that
    demonstrates and discusses the following:

    1. Your **library** passing the automated tests.

    2. Compares and contrast the three heap management strategies by discussing:

        a. Which heap management strategy uses the **least amount of space**?

        b. Which heap management strategy was the **fastest**?

        c. Which heap management strategy exhibited the **least fragmentation**?

    3. Any **errata, quirks, or unresolved issues** in your project.

    4. What you **learned** by doing this project.

    The video should include narration to describe what is being presented and
    should cover the requirements enumerated above. It should be no longer than
    `5` minutes.

    Please upload the video to either [YouTube] or [Google Drive] and provide a
    link to it in your `README.md`.

    [YouTube]: https://youtube.com
    [Google Drive]: https://drive.google.com

    ### Individual Quiz

    Once you have completed the project, answer the following [Project 03 Quiz]
    questions **individually** in your own personal `assignments` repository on [GitHub]:

    <div id="quiz-questions"></div>

    <div id="quiz-responses"></div>

    <script src="static/js/dredd-quiz.js"></script>
    <script>
    loadQuiz('static/json/project03.json');
    </script>

    <pre style="display: none;" id="dr-container" class="codehilite"><code id="dredd-response"></code></pre>

    The results of the quiz should look like the following:

        :::text
        Checking project03 quiz ...
              Q1 0.50
              Q2 0.50
              Q3 2.00
           Score 3.00 / 3.00
          Status Success

    <div class="alert alert-info" markdown="1">
    #### <i class="fa fa-git"></i> Individual Quiz

    Each group member should do the quiz on their own and record their answers
    in the `project03` folder in their **assignments** [GitHub] repository.

    Once you have committed your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the appropriate **teaching
    assistant** from the [Reading 09 TA List].

    </div>

    [Project 03 Quiz]: static/json/project03.json

    ## Grading

    Your project will be graded on the following metrics:

    <table class="table table-striped table-bordered" markdown="1">
      <thead>
        <th>Metric</th>
        <th>Points</th>
      </thead>
      <tbody>
        <tr>
          <td>
            <strong>Source Code</strong>
            <ol>
              <li><b>General</b>
                <ul>
                  <li>Builds and cleans without warnings or errors</li>
                  <li>Manages resources such as memory and files appropriately</li>
                  <li>Is consistent, readable, and organized</li>
                  <li>Has regular commits and submitted on-time</li>
                </ul>
              </li>
              <br>
              <li><b>Block</b>
                <ul>
                  <li>Implements <tt>block_release</tt> properly</li>
                  <li>Implements <tt>block_detach</tt> properly</li>
                  <li>Implements <tt>block_merge</tt> properly</li>
                  <li>Implements <tt>block_split</tt> properly</li>
                </ul>
              </li>
              <br>
              <li><b>Counters</b>
                <ul>
                  <li>Implements <tt>internal_fragmentation</tt> properly</li>
                  <li>Implements <tt>external_fragmentation</tt> properly</li>
                </ul>
              </li>
              <br>
              <li><b>Free List</b>
                <ul>
                  <li>Implements <tt>free_list_search_ff</tt> properly</li>
                  <li>Implements <tt>free_list_search_bf</tt> properly</li>
                  <li>Implements <tt>free_list_search_wf</tt> properly</li>
                  <li>Implements <tt>free_list_insert</tt> properly</li>
                  <li>Implements <tt>free_list_length</tt> properly</li>
                </ul>
              </li>
              <br>
              <li><b>POSIX</b>
                <ul>
                  <li>Implements <tt>malloc</tt> properly</li>
                  <li>Implements <tt>free</tt> properly</li>
                  <li>Implements <tt>calloc</tt> properly</li>
                  <li>Implements <tt>realloc</tt> properly</li>
                </ul>
              </li>
            </ol>
          </td>
          <td>
            <strong>10.00</strong>
            <ol class="list-unstyled">
              <li><b><i>1.00</i></b>
                <ul class="list-unstyled">
                  <li><i>0.25</i></li>
                  <li><i>0.25</i></li>
                  <li><i>0.25</i></li>
                  <li><i>0.25</i></li>
                </ul>
              </li>
              <br>
              <li><b><i>2.5</i></b>
                <ul class="list-unstyled">
                  <li><i>0.25</i></li>
                  <li><i>0.25</i></li>
                  <li><i>1.00</i></li>
                  <li><i>1.00</i></li>
                </ul>
              </li>
              <br>
              <li><b><i>0.50</i></b>
                <ul class="list-unstyled">
                  <li><i>0.25</i></li>
                  <li><i>0.25</i></li>
                </ul>
              </li>
              <br>
              <li><b><i>3.0</i></b>
                <ul class="list-unstyled">
                  <li><i>0.50</i></li>
                  <li><i>0.50</i></li>
                  <li><i>0.50</i></li>
                  <li><i>1.00</i></li>
                  <li><i>0.50</i></li>
                </ul>
              </li>
              <br>
              <li><b><i>3.0</i></b>
                <ul class="list-unstyled">
                  <li><i>1.0</i></li>
                  <li><i>0.5</i></li>
                  <li><i>0.5</i></li>
                  <li><i>1.0</i></li>
                </ul>
              </li>
            </ol>
          </td>
        </tr>
         <tr>
          <td>
          <strong>Reflection</strong>
          <ol>
            <li><b>Group Video Demonstration</b>
            <ul>
              <li>Exhibits reasonable audio and video quality</li>
              <li>Demonstrates <b>library</b> passing automated tests</li>
              <li>Compares and contrasts <b>heap management strategies</b></li>
              <li>Discusses errata, quirks, or unresolved issues</li>
              <li>Discusses what the group learned from the project</li>
            </ul>
            <br>
            </li>
            <li><b>Individual Quiz</b></li>
          </ol>
          </td>
          <td>
          <strong>5.00</strong>
          <ol class="list-unstyled">
            <li><b><i>2.0</i></b>
            <ul class="list-unstyled">
              <li><i>0.25</i></li>
              <li><i>0.75</i></li>
              <li><i>0.50</i></li>
              <li><i>0.25</i></li>
              <li><i>0.25</i></li>
            </ul>
            <br>
            </li>
            <li><b>3.0</b></li>
          </ol>
        </tr>
      </tbody>
    </table>

    <div class="alert alert-warning" markdown="1">
    #### <i class="fa fa-git"></i> Commit History

    To encourage you to work on the project **regularly** (rather than leaving
    it until the last second) and to practice performing **incremental
    development**, part of your grade will be based on whether or not you have
    regular and reasonably sized commits in your [git] log.

    That is, you will **lose** a point if you commit everything at once near
    the project deadline.

    </div>

    [Linux]: https://kernel.org
    [system call]: https://en.wikipedia.org/wiki/System_call
    [Valgrind]: http://valgrind.org/
    [Operating Systems: Three Easy Pieces]: http://pages.cs.wisc.edu/~remzi/OSTEP/
    [Project 03]: https://github.com/nd-cse-30341-fa24/project03
    [Reading 00]: reading00.html
    [Reading 09 TA List]: reading09_tas.html
    [GitHub]: https://github.com
    [Coding Style]: static/img/coding-style.png
    [Google Drive]: https://drive.google.com
    [Qt]: https://www.qt.io/
    [sbrk]: http://man7.org/linux/man-pages/man2/brk.2.html
    [malloc0.c]: https://github.com/nd-cse-30341-fa24/examples/blob/master/lecture14/malloc0.c
    [malloc1.c]: https://github.com/nd-cse-30341-fa24/examples/blob/master/lecture14/malloc1.c
    [Lecture 14]: https://docs.google.com/presentation/d/1dnkt6y3w1HsA0f747OEwe1sWlpA0zp2iFmuNHywZCto/edit?usp=sharing

    [free list]: https://en.wikipedia.org/wiki/Free_list
    [internal fragmentation]: https://en.wikipedia.org/wiki/Fragmentation_(computing)#Internal_fragmentation
    [external fragmentation]: https://en.wikipedia.org/wiki/Fragmentation_(computing)#External_fragmentation
    [word size]: https://en.wikipedia.org/wiki/Word_(computer_architecture)
    [POSIX]: https://en.wikipedia.org/wiki/POSIX
    [git]: https://git-scm.com/
